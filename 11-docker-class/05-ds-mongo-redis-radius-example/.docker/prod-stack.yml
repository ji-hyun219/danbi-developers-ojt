version: "3.7"
x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2021-11-09T03-21-45Z
  command: server --console-address ":9001" http://minio{1...4}/data{1...2}
  expose:
    - 9000
    - 9001
  environment:
    MINIO_ROOT_USER: danbi
    MINIO_ROOT_PASSWORD: eksql12#
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3
x-mongo-common: &mongo-common
  image: mongo:latest
  networks:
    - mongo-bridge
  entrypoint:
    [
      "/usr/bin/mongod",
      "--bind_ip_all",
      "--replSet",
      "rs0",
      "--journal",
      "--dbpath",
      "/data/db",
    ]
  env_file:
    - .env
  environment:
    MONGO_REPLICA_SET_NAME: rs0
  deploy:
    mode: replicated
    replicas: 1
    update_config:
      parallelism: 3
services:
  backend:
    image: 759927213627.dkr.ecr.ap-northeast-2.amazonaws.com/gn-cp-api:latest
    environment:
      - NODE_ENV=production
    networks:
      - inbound
      - backend
    logging:
      driver: json-file
      options:
        max-file: "10"
        max-size: "100m"
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      labels:
        - traefik.enable=true
        - traefik.docker.lbswarm=true
        - traefik.docker.network=inbound
        - traefik.http.routers.gn-cp-api.rule=Host(`gn.cp.danbicorp.com`)
        - traefik.http.routers.gn-cp-api.service=gn-cp-api-service
        - traefik.http.routers.gn-cp-api.entrypoints=websecure
        - traefik.http.routers.gn-cp-api.tls=true
        - traefik.http.routers.gn-cp-api.tls.certresolver=gn-cp
        - traefik.http.services.gn-cp-api-service.loadbalancer.server.port=3000
  mongo-setup:
    image: mongo:latest
    restart: on-failure
    networks:
      - mongo-bridge
    volumes:
      - ./.docker/mongo:/scripts
    entrypoint: ["/scripts/setup.sh"]
    depends_on:
      - mongo1
      - mongo2
      - mongo3
  mongo1:
    <<: *mongo-common
    hostname: mongo1
    volumes:
      - mongodb1:/data/db
    ports:
      - 27020:27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo1:27017/test --quiet
      interval: 10s
      start_period: 30s
  mongo2:
    <<: *mongo-common
    hostname: mongo2
    volumes:
      - mongodb2:/data/db
    ports:
      - 27021:27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo2:27017/test --quiet
      interval: 10s
      start_period: 30s
  mongo3:
    <<: *mongo-common
    hostname: mongo3
    volumes:
      - mongodb3:/data/db
    ports:
      - 27022:27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo3:27017/test --quiet
      interval: 10s
      start_period: 30s
  redis:
    image: library/redis:6
    networks:
      - backend
    volumes:
      - redis_data:/data
    logging:
      driver: json-file
      options:
        max-file: "1"
        max-size: "20m"
  radius:
    build: ./.docker/radius
    image: 759927213627.dkr.ecr.ap-northeast-2.amazonaws.com/danbi-radius:latest
    networks:
      - inbound
    command: -X
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.lbswarm=true
        - traefik.docker.network=inbound
        - traefik.udp.routers.danbi-radius-auth.entrypoints=auth
        - traefik.udp.routers.danbi-radius-acct.entrypoints=acct
        - traefik.udp.routers.danbi-radius-auth.service=danbi-radius-auth-service
        - traefik.udp.routers.danbi-radius-acct.service=danbi-radius-acct-service
        - traefik.udp.services.danbi-radius-auth-service.loadbalancer.server.port=1812
        - traefik.udp.services.danbi-radius-acct-service.loadbalancer.server.port=1813
    logging:
      driver: json-file
      options:
        max-file: "10"
        max-size: "100m"
  traefik:
    image: traefik:2.2
    command:
      #- --log.level=DEBUG
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.swarmMode=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.auth.address=:1812/udp
      - --entrypoints.acct.address=:1813/udp
      - --entrypoints.minio-endpoint.address=:9010
      - --entrypoints.minio-dash.address=:9011
      - --certificatesResolvers.gn-cp.acme.httpchallenge=true
      - --certificatesResolvers.gn-cp.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.gn-cp.acme.storage=/letsencrypt/acme.json
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 1812
        published: 1812
        protocol: udp
        mode: host
      - target: 1813
        published: 1813
        protocol: udp
        mode: host
      - target: 9010
        published: 9010
        protocol: tcp
      - target: 9011
        published: 9011
        protocol: tcp
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - inbound
    logging:
      driver: json-file
      options:
        max-file: "5"
        max-size: "20m"
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    volumes:
      - ./.docker/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - inbound
      - backend
    ports:
      - target: 9000

      - 9000:9000
      - 9001:9001
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4
    labels:
      - traefik.enable=true
      - traefik.docker.lbswarm=true
      - traefik.docker.network=inbound
      - traefik.udp.routers.danbi-minio-endpoint.entrypoints=minio-endpoint
      - traefik.udp.routers.danbi-minio-dashboard.entrypoints=minio-dash
      - traefik.udp.routers.danbi-minio-endpoint.service=danbi-minio-endpoint-service
      - traefik.udp.routers.danbi-minio-dashboard.service=danbi-minio-dashboard-service
      - traefik.udp.services.danbi-minio-endpoint-service.loadbalancer.server.port=9000
      - traefik.udp.services.danbi-minio-dashboard-service.loadbalancer.server.port=9001
volumes:
  letsencrypt:
  redis_data:
  mongodb1:
  mongodb2:
  mongodb3:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:

networks:
  inbound:
    name: inbound
  backend:
    name: backend
  mongo-bridge:
    name: mongo-bridge
